from trajectory_analysis_script import *
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.colors

import tensorflow as tf



a= run_analysis("/Users/baljyot/Desktop/Baljyot_EXP_RPOC/DATA/Nusa_20190305","NUSA")
a.read_parameters(minimum_percent_per_drop_in = 0.1,t_len_u = 50)
a.run_flow()

b = a.viable_drop_total
c = a.in_track_total 
c1 = a.io_track_total 
c2 = a.ot_track_total
cp = a.in_msd_all
cp1 = a.io_msd_all
cp2 = a.ot_msd_all
d = a.segmented_drop_files

total_log_msd = np.log10(np.array(a.i_d_tavg + a.io_d_tavg + a.o_d_tavg))


cvals  = [np.min(total_log_msd),np.percentile(total_log_msd,25), np.percentile(total_log_msd,75), np.max(total_log_msd)]
colors = ["green","red","violet","blue"]

norm=plt.Normalize(min(cvals),max(cvals))
tuples = list(zip(map(norm,cvals), colors))
cmap = matplotlib.colors.LinearSegmentedColormap.from_list("", tuples)


e1 = a.in_msd_all
e2 = a.io_msd_all
e3 = a.ot_msd_all


plt.hist(np.log10(a.i_d_tavg),label = "in",alpha = 0.3,normed = True)
plt.hist(np.log10(a.o_d_tavg),label = "out",alpha = 0.3,normed = True)
plt.hist(np.log10(a.io_d_tavg),label = "in/out",alpha = 0.3,normed = True)
plt.hist(np.log10(a.unrestricted_msd),label = "BASELINE",alpha = 0.3,normed = True)
#plt.xscale("log")
plt.legend()
plt.show()

total_len = len(a.i_d_tavg) + len(a.io_d_tavg) + len(a.o_d_tavg)
in_len = float(len(a.i_d_tavg))/total_len
io_len = float(len(a.io_d_tavg))/total_len
out_len = float(len(a.o_d_tavg))/total_len

for i in range(len(e1)):
	for j in range(len(e1[i])):
		if len(e1[i][j]) != 0:
			plt.plot(e1[i][j],np.ones(len(e1[i][j]))*j,'b.')
		if len(e2[i][j]) != 0:
			plt.plot(e2[i][j],np.ones(len(e2[i][j]))*j,'y.')
		if len(e3[i][j]) != 0:
			plt.plot(e3[i][j],np.ones(len(e3[i][j]))*j,'r.')

	plt.xscale("log")
	plt.xlabel("MSD in um^2/s")
	plt.ylabel("Frame Subset (index from 0)")
	plt.legend(["Blue: in","Yellow: In/Out","Red: Out"])
	plt.show()

drop_color = ["y","b","r","g","m"]

for i in range(len(b)):
	if len(d[i]) != 0:
		img = mpimg.imread(d[i][0])
		timg = plt.imshow(img,cmap=plt.get_cmap('gray'))
	for j in range(len(b[i])):
		for l in range(len(c[i][j])):
			if len(c[i][j][l])!=0:
				temp = np.array(c[i][j][l])
				#plt.plot(temp[0],temp[1],'b-')
				plt.scatter(temp[0],temp[1],s= 2,c = (np.zeros(len(temp[0]))+np.log10(np.array(cp[i][j][l]))),cmap=cmap, norm = norm)

		for l in range(len(c1[i][j])):
			if len(c1[i][j][l])!=0:
				temp = np.array(c1[i][j][l])
				#plt.plot(temp[0],temp[1],'g-')
				plt.scatter(temp[0],temp[1],s = 2,c = (np.zeros(len(temp[0]))+np.log10(np.array(cp1[i][j][l]))),cmap=cmap, norm = norm)

		for l in range(len(c2[i][j])):
			if len(c2[i][j][l])!=0:
				temp = np.array(c2[i][j][l])
				#plt.plot(temp[0],temp[1],'r-')
				plt.scatter(temp[0],temp[1],s= 2,c = (np.zeros(len(temp[0]))+np.log10(np.array(cp2[i][j][l]))),cmap=cmap, norm = norm)

		#if (len(b[i][j])>0):
		#	for k in range(len(b[i][j])):
		#		circles(b[i][j][k][0], b[i][j][k][1], b[i][j][k][2], c=drop_color[j], alpha = 0.35)
	plt.colorbar()
	#plt.savefig("Frame_{0}".format(i))
	plt.show()

fraction_tick = [i for i in range(1,int(a.frame_total/a.frame_step)+1)]

create_box_plot(a.tmframe_occ,fraction_tick,y_label = "Fraction inside the drop",x_label = "Frame number",y_lim = (),title = "Percent Occupation of Track in Drop per Frame Over All Experiments")

for i in a.tmframe_occ:

	w_i = np.ones_like(i)/float(len(i))
	plt.hist(i,histtype = 'step',weights=w_i)
	plt.xlabel("Fraction inside the drop")
	plt.ylabel("Probability")
	plt.title("Percent Occupation of Track in Drop per Frame")
plt.show()





